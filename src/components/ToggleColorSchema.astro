<x-toggle>
  <label>
    <input class="toggle-checkbox" type="checkbox" name="dark-light" />
    <div class="toggle-slot">
      <div class="sun-icon-wrapper">
        <div
          class="iconify sun-icon"
          data-icon="feather-sun"
          data-inline="false"
        >
        </div>
      </div>
      <div class="toggle-button"></div>
      <div class="moon-icon-wrapper">
        <div
          class="iconify moon-icon"
          data-icon="feather-moon"
          data-inline="false"
        >
        </div>
      </div>
    </div>
  </label>
</x-toggle>


<style>
  label {
    scale: 0.8;
    margin: 0;
  }
  /* From Uiverse.io by JkHuger */
  .toggle-checkbox {
    position: absolute;
    opacity: 0;
    cursor: pointer;
    height: 0;
    width: 0;
  }

  .toggle-slot {
    font-size: 10px;
    position: relative;
    height: 3.5em;
    width: 7em;
    border: 0px solid transparent;
    border-radius: 10em;
    background-color: rgb(238, 238, 238);
    transition: background-color 250ms;
  }

  .toggle-checkbox:checked ~ .toggle-slot {
    background-color: #374151;
  }

  .toggle-button {
    transform: translate(0.3em, 0.25em);
    position: absolute;
    height: 3em;
    width: 3em;
    border-radius: 50%;
    background-color: #ffeccf;
    box-shadow: inset 0px 0px 0px 0.75em #ffbb52;
    transition:
      background-color 250ms,
      border-color 250ms,
      transform 500ms cubic-bezier(0.26, 2, 0.46, 0.71);
  }

  .toggle-checkbox:checked ~ .toggle-slot .toggle-button {
    background-color: #485367;
    box-shadow: inset 0px 0px 0px 0.75em white;
    transform: translate(3.65em, 0.25em);
  }

  .sun-icon {
    position: absolute;
    height: 6em;
    width: 6em;
    color: #ffbb52;
  }

  .sun-icon-wrapper {
    position: absolute;
    height: 6em;
    width: 6em;
    opacity: 1;
    transform: translate(2em, 2em) rotate(15deg);
    transform-origin: 50% 50%;
    transition:
      opacity 150ms,
      transform 500ms cubic-bezier(0.26, 2, 0.46, 0.71);
  }

  .toggle-checkbox:checked ~ .toggle-slot .sun-icon-wrapper {
    opacity: 0;
    transform: translate(3em, 2em) rotate(0deg);
  }

  .moon-icon {
    position: absolute;
    height: 6em;
    width: 6em;
    color: white;
  }

  .moon-icon-wrapper {
    position: absolute;
    height: 6em;
    width: 6em;
    opacity: 0;
    transform: translate(11em, 2em) rotate(0deg);
    transform-origin: 50% 50%;
    transition:
      opacity 150ms,
      transform 500ms cubic-bezier(0.26, 2.5, 0.46, 0.71);
  }

  .toggle-checkbox:checked ~ .toggle-slot .moon-icon-wrapper {
    opacity: 1;
    transform: translate(2em, 2em) rotate(-15deg);
  }
</style>

<script>
  class Toggle extends HTMLElement {

    static init = () =>
      !customElements.get("x-toggle")
        ? customElements.define("x-toggle", Toggle)
        : null;

    constructor() {
      super();
      this.addEventListener('change', this);
    }

    // references
    public checkbox: HTMLInputElement = this.querySelector('input')!
    public html: HTMLElement = document.querySelector('html')!


    handleEvent = () => {
      const isChecked = this.checkbox.checked

      if (isChecked) {
         this.html.dataset.theme = 'dark'
         localStorage.setItem('prefers_schema', 'dark')
      } else {
         this.html.dataset.theme = 'light'
         localStorage.setItem('prefers_schema', 'light')
      }
    }

    connectedCallback() {
      const browserSchema = globalThis.matchMedia('(prefers-color-scheme: dark)').matches ? 'dark' : 'light'
      const prefersSchema = localStorage.getItem('prefers_schema')


      this.html.dataset.theme = prefersSchema ?? browserSchema
      this.checkbox.checked = prefersSchema === 'dark' || browserSchema === 'dark'
    }
  }

  Toggle.init();
</script>
