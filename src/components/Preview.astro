---
type Snippet = {
    selected?: boolean;
    name: string;
    content: string;
    lang: "js" | "css" | "html";
    file: string;
};

interface Props {
    snippets: Snippet[];
    tabsName: string;
}

const { snippets } = Astro.props

const scriptFile = snippets.find(s => s.lang === "js")
const htmlFile = snippets.find(s => s.lang === 'html')
---

<code-preview data-html-src={`/snippets/${htmlFile?.file}.html`} data-js-src={`/snippets/${scriptFile?.file}.js`}>
    <div data-id="content"></div>
</code-preview>

<script>
    class CodePreview extends HTMLElement {
        content = this.querySelector('[data-id="content"]')!

        constructor() {
            super();

        }

        async connectedCallback() {
            try {
                const response = await fetch(this.dataset.htmlSrc!, {
                    headers: {
                        "content-type": "text/html; charset=utf-8"
                    }
                })
                const text = await response.text()
                this.content.innerHTML = text

                const script = document.createElement('script')
                script.type = "module"
                script.src = this.dataset.jsSrc!

                this.content.appendChild(script)

            } catch(_) {}
        }
    }

    if (!customElements.get('code-preview')) 
        customElements.define('code-preview', CodePreview)
</script>

<style>
    code-preview {
        display: block;
        padding: 0.5rem;
        border-radius: 4px;
        background-color: ghostwhite;

        * {
            color: black;
            font-family: 'Courier New', Courier, monospace;
        }
    }
</style>